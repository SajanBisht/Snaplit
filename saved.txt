import { useDeleteComment, useFetchComments, useGetCurrentUser, useGetPostById, useGetUsers, useHandleCommentSubmit } from "@/lib/react-query/queryAndMutations";
import { Models } from "appwrite";
import Loader from "./Loader";
import { Button } from "../ui/button";
import PostCard from "./PostCard";
import { Link } from "react-router-dom";
import { formatDistanceToNow } from "date-fns";
import Subcomments from "./Subcomments";
import CommentInput from "./CommentInput";
import { useRef, useState } from "react";

interface CommentListProps {
    postId: string;
}

const CommentList: React.FC<CommentListProps> = ({ postId }) => {
    const { mutate: handleCommentSubmit } = useHandleCommentSubmit();
    const { data: currentUser } = useGetCurrentUser();
    const { data: comments, isLoading, error } = useFetchComments(postId);
    const { data: post } = useGetPostById(postId);
    console.log('post', post)
    console.log('comments', comments);

    // Extract unique userIds from comments
    const userIdArray = Array.from(
        new Set((comments ?? []).map(comment => comment.userId?.trim()).filter(Boolean))
    );

    console.log('Unique userIdArray:', userIdArray);

    // Fetch user data
    const userQueries = useGetUsers(userIdArray);
    const userData = userQueries?.data ?? [];

    // Create a lookup map of userId -> imageUrl
    const userImageMap = userData.reduce((acc, user) => {
        acc[user.$id] = user.imageUrl || "/assets/icons/holder.svg"; // Default if no imageUrl
        return acc;
    }, {} as Record<string, string>);
    const userNameMap = userData.reduce((name, user) => {
        name[user.$id] = user.name || "User"; // Default if no Name
        return name;
    }, {} as Record<string, string>);

    console.log('User Image Map:', userImageMap);
    const { mutate: deleteComments, isPending: deleteCommentsLoading } = useDeleteComment();
    const [deletingCommentId, setDeletingCommentId] = useState<string | null>(null);

    const handledelete=()=>{

    }
    return (
        <div className="h-[80%]  flex-col  w-full sticky">
            {/* Comments List */}
            <div className="w-full flex">
                <div className="w-[50%] sticky h-[300px] top-0">
                    {post && !('error' in post) && <PostCard key={postId} post={post} toggleComment={true} />}
                </div>
                <div className="w-[50%] ">
                    {isLoading && <Loader />}
                    {error && <p className="text-red-500">Error loading comments.</p>}
                    <ul>
                        {comments && comments.map((comment: Models.Document) => (
                            <li key={comment.$id} className="p-2 border-b">
                                <div className="flex items-start gap-3">
                                    <Link to={`/profile/${comment.$id}`}>
                                        <img
                                            src={userImageMap[comment.userId] || "/assets/icons/holder.svg"}
                                            alt="Avatar"
                                            className="w-8 h-8 rounded-full"
                                        />
                                    </Link>
                                    <div className="w-[80%]">
                                        <div className="flex items-center gap-4 w-full">
                                            <div className="w-[80%] ">
                                                <p className="font-semibold">{userNameMap[comment.userId]}</p>
                                                <span className="text-gray-500 text-xs flex items-center gap-1">
                                                    <span>â€¢</span>{formatDistanceToNow(new Date(comment.$createdAt), { addSuffix: true })}
                                                </span>
                                            </div>

                                            {/* Show Loader only for the comment being deleted */}
                                            {deletingCommentId === comment.$id ? (
                                                <div>
                                                    <Loader />
                                                </div>
                                            ) : (
                                                currentUser?.$id === comment.userId && (
                                                    <div className="cursor-pointer">
                                                        <img
                                                            src={comment.isImportant ? "/assets/images/three_dot2.png" : "/assets/images/three_dot2.png"}
                                                            alt="Delete"
                                                            onClick={() => {
                                                                setDeletingCommentId(comment.$id); // Set loading state for this comment
                                                                deleteComments(comment.$id, {
                                                                    onSuccess: () => setDeletingCommentId(null), // Reset state after deletion
                                                                    onError: () => setDeletingCommentId(null) // Reset state on error
                                                                });
                                                            }}
                                                            width={16} />
                                                    </div>
                                                )
                                            )}
                                        </div>
                                        <p className="text-gray-400">{comment.content}</p>
                                    </div>
                                </div>
                                <Subcomments parentId={comment.$id} postId={postId} comment={comment} />
                            </li>
                        ))}
                    </ul>
                    <div className="text-gray-400 h-[180px]">No more comments</div>

                </div>
            </div>
            {/* Comment Input */}
            <div className="sticky bottom-0 mb-4">
                <CommentInput
                    postId={postId}
                    userId={currentUser?.id}
                    onCommentSubmit={(content, parentId) =>
                        handleCommentSubmit({
                            postId: postId,
                            userId: currentUser?.$id,
                            content,
                            parentId,
                        })
                    }
                />
            </div>
        </div>
    );
};

export default CommentList;

 